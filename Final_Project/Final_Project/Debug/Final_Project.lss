
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  00000846  000008da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000846  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800216  00800216  000009f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001da1  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2d  00000000  00000000  000028f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  00003326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  000040e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b0  00000000  00000000  0000436c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000102d  00000000  00000000  0000491c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005949  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3b 03 	call	0x676	; 0x676 <main>
  9e:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Begin>:
  a6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c0:	86 e0       	ldi	r24, 0x06	; 6
  c2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  c6:	08 95       	ret

000000c8 <USART_Receive>:
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	ec f7       	brge	.-6      	; 0xcc <USART_Receive+0x4>
  d2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d6:	08 95       	ret

000000d8 <USART_SendByte>:
  d8:	e0 ec       	ldi	r30, 0xC0	; 192
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	90 81       	ld	r25, Z
  de:	95 ff       	sbrs	r25, 5
  e0:	fd cf       	rjmp	.-6      	; 0xdc <USART_SendByte+0x4>
  e2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  e6:	08 95       	ret

000000e8 <Transmit_string>:
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	21 96       	adiw	r28, 0x01	; 1
  f0:	fc 01       	movw	r30, r24
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	59 f0       	breq	.+22     	; 0x10e <Transmit_string+0x26>
  f8:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_SendByte>
  fc:	83 ef       	ldi	r24, 0xF3	; 243
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <Transmit_string+0x18>
 104:	00 c0       	rjmp	.+0      	; 0x106 <Transmit_string+0x1e>
 106:	00 00       	nop
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	f5 cf       	rjmp	.-22     	; 0xf8 <Transmit_string+0x10>
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <USART_SendLine>:
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_SendByte>
 11a:	8a e0       	ldi	r24, 0x0A	; 10
 11c:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_SendByte>
 120:	08 95       	ret

00000122 <delay_us>:

#ifndef BEES_MY_MUSIC_H_
#define BEES_MY_MUSIC_H_

void delay_us(int us){
	for (int i = 0; i < us; i++){
 122:	18 16       	cp	r1, r24
 124:	19 06       	cpc	r1, r25
 126:	44 f4       	brge	.+16     	; 0x138 <delay_us+0x16>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	00 00       	nop
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	82 17       	cp	r24, r18
 134:	93 07       	cpc	r25, r19
 136:	d1 f7       	brne	.-12     	; 0x12c <delay_us+0xa>
 138:	08 95       	ret

0000013a <beep_main>:
		_delay_us(1);
	}
}

void beep_main(){
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	for (int i = 100; i < 200; i+=5) {
 140:	c4 e6       	ldi	r28, 0x64	; 100
 142:	d0 e0       	ldi	r29, 0x00	; 0
		PORTC = 0x01;
 144:	11 e0       	ldi	r17, 0x01	; 1
 146:	18 b9       	out	0x08, r17	; 8
		delay_us(i);
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 14e:	18 b8       	out	0x08, r1	; 8
		delay_us(500);
 150:	84 ef       	ldi	r24, 0xF4	; 244
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		_delay_us(1);
	}
}

void beep_main(){
	for (int i = 100; i < 200; i+=5) {
 158:	25 96       	adiw	r28, 0x05	; 5
 15a:	c8 3c       	cpi	r28, 0xC8	; 200
 15c:	d1 05       	cpc	r29, r1
 15e:	99 f7       	brne	.-26     	; 0x146 <beep_main+0xc>
		PORTC = 0x01;
		delay_us(i);
		PORTC = 0x00;
		delay_us(500);
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	08 95       	ret

00000168 <beep_1>:

void beep_1(){
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	c4 e6       	ldi	r28, 0x64	; 100
 170:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 172:	11 e0       	ldi	r17, 0x01	; 1
 174:	18 b9       	out	0x08, r17	; 8
		delay_us(20);
 176:	84 e1       	ldi	r24, 0x14	; 20
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 17e:	18 b8       	out	0x08, r1	; 8
		delay_us(980);
 180:	84 ed       	ldi	r24, 0xD4	; 212
 182:	93 e0       	ldi	r25, 0x03	; 3
 184:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 188:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(500);
	}
}

void beep_1(){
	for (int i = 0; i < 100; i++) {
 18a:	a1 f7       	brne	.-24     	; 0x174 <beep_1+0xc>
		PORTC = 0x01;
		delay_us(20);
		PORTC = 0x00;
		delay_us(980);
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	08 95       	ret

00000194 <beep_2>:

void beep_2(){
	beep_main();
 194:	0e 94 9d 00 	call	0x13a	; 0x13a <beep_main>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f e5       	ldi	r18, 0x5F	; 95
 19a:	8a ee       	ldi	r24, 0xEA	; 234
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <beep_2+0xa>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <beep_2+0x14>
 1a8:	00 00       	nop
	_delay_ms(300);
	beep_main();
 1aa:	0e 94 9d 00 	call	0x13a	; 0x13a <beep_main>
 1ae:	8f e4       	ldi	r24, 0x4F	; 79
 1b0:	93 ec       	ldi	r25, 0xC3	; 195
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <beep_2+0x1e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <beep_2+0x24>
 1b8:	00 00       	nop
	_delay_ms(200);
	beep_main();
 1ba:	0e 94 9d 00 	call	0x13a	; 0x13a <beep_main>
 1be:	08 95       	ret

000001c0 <beep_3>:
}

void beep_3(){
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	8b e7       	ldi	r24, 0x7B	; 123
 1c8:	92 e9       	ldi	r25, 0x92	; 146
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <beep_3+0xa>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <beep_3+0x10>
 1d0:	00 00       	nop
 1d2:	c4 e6       	ldi	r28, 0x64	; 100
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 1d6:	11 e0       	ldi	r17, 0x01	; 1
 1d8:	18 b9       	out	0x08, r17	; 8
		delay_us(20);
 1da:	84 e1       	ldi	r24, 0x14	; 20
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 1e2:	18 b8       	out	0x08, r1	; 8
		delay_us(980);
 1e4:	84 ed       	ldi	r24, 0xD4	; 212
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 1ec:	21 97       	sbiw	r28, 0x01	; 1
	beep_main();
}

void beep_3(){
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
 1ee:	a1 f7       	brne	.-24     	; 0x1d8 <beep_3+0x18>
 1f0:	87 ea       	ldi	r24, 0xA7	; 167
 1f2:	91 e6       	ldi	r25, 0x61	; 97
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <beep_3+0x34>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <beep_3+0x3a>
 1fa:	00 00       	nop
 1fc:	c8 ec       	ldi	r28, 0xC8	; 200
 1fe:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
		PORTC = 0x01;
 200:	11 e0       	ldi	r17, 0x01	; 1
 202:	18 b9       	out	0x08, r17	; 8
		delay_us(67);
 204:	83 e4       	ldi	r24, 0x43	; 67
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 20c:	18 b8       	out	0x08, r1	; 8
		delay_us(600);
 20e:	88 e5       	ldi	r24, 0x58	; 88
 210:	92 e0       	ldi	r25, 0x02	; 2
 212:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 216:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(980);
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
 218:	a1 f7       	brne	.-24     	; 0x202 <beep_3+0x42>
		PORTC = 0x01;
		delay_us(67);
		PORTC = 0x00;
		delay_us(600);
	}
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <beep_4>:

void beep_4(){
 222:	1f 93       	push	r17
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	8b e7       	ldi	r24, 0x7B	; 123
 22a:	92 e9       	ldi	r25, 0x92	; 146
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <beep_4+0xa>
 230:	00 c0       	rjmp	.+0      	; 0x232 <beep_4+0x10>
 232:	00 00       	nop
 234:	c4 e6       	ldi	r28, 0x64	; 100
 236:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 238:	11 e0       	ldi	r17, 0x01	; 1
 23a:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 244:	18 b8       	out	0x08, r1	; 8
		delay_us(200);
 246:	88 ec       	ldi	r24, 0xC8	; 200
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 24e:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void beep_4(){
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
 250:	a1 f7       	brne	.-24     	; 0x23a <beep_4+0x18>
 252:	87 ea       	ldi	r24, 0xA7	; 167
 254:	91 e6       	ldi	r25, 0x61	; 97
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <beep_4+0x34>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <beep_4+0x3a>
 25c:	00 00       	nop
 25e:	c8 ec       	ldi	r28, 0xC8	; 200
 260:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
		PORTC = 0x01;
 262:	11 e0       	ldi	r17, 0x01	; 1
 264:	18 b9       	out	0x08, r17	; 8
		delay_us(97);
 266:	81 e6       	ldi	r24, 0x61	; 97
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 26e:	18 b8       	out	0x08, r1	; 8
		delay_us(300);
 270:	8c e2       	ldi	r24, 0x2C	; 44
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 278:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(200);
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
 27a:	a1 f7       	brne	.-24     	; 0x264 <beep_4+0x42>
		PORTC = 0x01;
		delay_us(97);
		PORTC = 0x00;
		delay_us(300);
	}
}
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	1f 91       	pop	r17
 282:	08 95       	ret

00000284 <beep_5>:

void beep_5(){
 284:	1f 93       	push	r17
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	8b e7       	ldi	r24, 0x7B	; 123
 28c:	92 e9       	ldi	r25, 0x92	; 146
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <beep_5+0xa>
 292:	00 c0       	rjmp	.+0      	; 0x294 <beep_5+0x10>
 294:	00 00       	nop
 296:	ce e1       	ldi	r28, 0x1E	; 30
 298:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 29a:	11 e0       	ldi	r17, 0x01	; 1
 29c:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 2a6:	18 b8       	out	0x08, r1	; 8
		delay_us(i+30);
 2a8:	ce 01       	movw	r24, r28
 2aa:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 2ae:	21 96       	adiw	r28, 0x01	; 1
	}
}

void beep_5(){
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
 2b0:	c2 38       	cpi	r28, 0x82	; 130
 2b2:	d1 05       	cpc	r29, r1
 2b4:	99 f7       	brne	.-26     	; 0x29c <beep_5+0x18>
 2b6:	87 ea       	ldi	r24, 0xA7	; 167
 2b8:	91 e6       	ldi	r25, 0x61	; 97
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <beep_5+0x36>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <beep_5+0x3c>
 2c0:	00 00       	nop
 2c2:	c8 ec       	ldi	r28, 0xC8	; 200
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
		PORTC = 0x01;
 2c6:	11 e0       	ldi	r17, 0x01	; 1
 2c8:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 2d2:	18 b8       	out	0x08, r1	; 8
		delay_us(200-i);
 2d4:	ce 01       	movw	r24, r28
 2d6:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 2da:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(i+30);
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
 2dc:	a9 f7       	brne	.-22     	; 0x2c8 <beep_5+0x44>
		PORTC = 0x01;
		delay_us(1);
		PORTC = 0x00;
		delay_us(200-i);
	}
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <beep_6>:

void beep_6(){
 2e6:	1f 93       	push	r17
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	8b e7       	ldi	r24, 0x7B	; 123
 2ee:	92 e9       	ldi	r25, 0x92	; 146
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <beep_6+0xa>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <beep_6+0x10>
 2f6:	00 00       	nop
 2f8:	c8 e2       	ldi	r28, 0x28	; 40
 2fa:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 2fc:	11 e0       	ldi	r17, 0x01	; 1
 2fe:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 308:	18 b8       	out	0x08, r1	; 8
		delay_us(i+40);
 30a:	ce 01       	movw	r24, r28
 30c:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 310:	21 96       	adiw	r28, 0x01	; 1
	}
}

void beep_6(){
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
 312:	cc 38       	cpi	r28, 0x8C	; 140
 314:	d1 05       	cpc	r29, r1
 316:	99 f7       	brne	.-26     	; 0x2fe <beep_6+0x18>
 318:	87 ea       	ldi	r24, 0xA7	; 167
 31a:	91 e6       	ldi	r25, 0x61	; 97
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <beep_6+0x36>
 320:	00 c0       	rjmp	.+0      	; 0x322 <beep_6+0x3c>
 322:	00 00       	nop
 324:	c4 e6       	ldi	r28, 0x64	; 100
 326:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
		PORTC = 0x01;
 328:	11 e0       	ldi	r17, 0x01	; 1
 32a:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 334:	18 b8       	out	0x08, r1	; 8
		delay_us(100+i);
 336:	ce 01       	movw	r24, r28
 338:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 33c:	21 96       	adiw	r28, 0x01	; 1
		delay_us(i+40);
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
 33e:	cc 32       	cpi	r28, 0x2C	; 44
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	d9 07       	cpc	r29, r25
 344:	91 f7       	brne	.-28     	; 0x32a <beep_6+0x44>
		PORTC = 0x01;
		delay_us(1);
		PORTC = 0x00;
		delay_us(100+i);
	}
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	08 95       	ret

0000034e <beep_7>:

void beep_7(){
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	8b e7       	ldi	r24, 0x7B	; 123
 356:	92 e9       	ldi	r25, 0x92	; 146
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <beep_7+0xa>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <beep_7+0x10>
 35e:	00 00       	nop
 360:	c4 e6       	ldi	r28, 0x64	; 100
 362:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 364:	11 e0       	ldi	r17, 0x01	; 1
 366:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 370:	18 b8       	out	0x08, r1	; 8
		delay_us(300);
 372:	8c e2       	ldi	r24, 0x2C	; 44
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 37a:	21 97       	sbiw	r28, 0x01	; 1
	}
}

void beep_7(){
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
 37c:	a1 f7       	brne	.-24     	; 0x366 <beep_7+0x18>
 37e:	87 ea       	ldi	r24, 0xA7	; 167
 380:	91 e6       	ldi	r25, 0x61	; 97
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <beep_7+0x34>
 386:	00 c0       	rjmp	.+0      	; 0x388 <beep_7+0x3a>
 388:	00 00       	nop
 38a:	c8 ec       	ldi	r28, 0xC8	; 200
 38c:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
		PORTC = 0x01;
 38e:	11 e0       	ldi	r17, 0x01	; 1
 390:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 39a:	18 b8       	out	0x08, r1	; 8
		delay_us(200);
 39c:	88 ec       	ldi	r24, 0xC8	; 200
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 3a4:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(300);
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
 3a6:	a1 f7       	brne	.-24     	; 0x390 <beep_7+0x42>
		PORTC = 0x01;
		delay_us(1);
		PORTC = 0x00;
		delay_us(200);
	}
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <beep_8>:
void beep_8(){
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	8b e7       	ldi	r24, 0x7B	; 123
 3b8:	92 e9       	ldi	r25, 0x92	; 146
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <beep_8+0xa>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <beep_8+0x10>
 3c0:	00 00       	nop
 3c2:	c4 e6       	ldi	r28, 0x64	; 100
 3c4:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
		PORTC = 0x01;
 3c6:	11 e0       	ldi	r17, 0x01	; 1
 3c8:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 3d2:	18 b8       	out	0x08, r1	; 8
		delay_us(600);
 3d4:	88 e5       	ldi	r24, 0x58	; 88
 3d6:	92 e0       	ldi	r25, 0x02	; 2
 3d8:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 3dc:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(200);
	}
}
void beep_8(){
	_delay_ms(150);
	for (int i = 0; i < 100; i++) {
 3de:	a1 f7       	brne	.-24     	; 0x3c8 <beep_8+0x18>
 3e0:	87 ea       	ldi	r24, 0xA7	; 167
 3e2:	91 e6       	ldi	r25, 0x61	; 97
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <beep_8+0x34>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <beep_8+0x3a>
 3ea:	00 00       	nop
 3ec:	c8 ec       	ldi	r28, 0xC8	; 200
 3ee:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
		PORTC = 0x01;
 3f0:	11 e0       	ldi	r17, 0x01	; 1
 3f2:	18 b9       	out	0x08, r17	; 8
		delay_us(1);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
		PORTC = 0x00;
 3fc:	18 b8       	out	0x08, r1	; 8
		delay_us(30);
 3fe:	8e e1       	ldi	r24, 0x1E	; 30
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 91 00 	call	0x122	; 0x122 <delay_us>
 406:	21 97       	sbiw	r28, 0x01	; 1
		delay_us(600);
	}
	
	_delay_ms(100);
	
	for (int i = 0; i < 200; i++) {
 408:	a1 f7       	brne	.-24     	; 0x3f2 <beep_8+0x42>
		PORTC = 0x01;
		delay_us(1);
		PORTC = 0x00;
		delay_us(30);
	}
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	08 95       	ret

00000412 <Request>:

bool pressed_f1 = false, pressed_f2 = false, pressed_f3 = false;

/*----------DHT11/Begin----------*/
void Request(){				//send start pulse/request 
	DDRD |= (1<<DHT11_PIN);
 412:	56 9a       	sbi	0x0a, 6	; 10
	PORTD |= (1<<DHT11_PIN);	/* set to on pin */
 414:	5e 9a       	sbi	0x0b, 6	; 11
 416:	2f e3       	ldi	r18, 0x3F	; 63
 418:	8d e0       	ldi	r24, 0x0D	; 13
 41a:	93 e0       	ldi	r25, 0x03	; 3
 41c:	21 50       	subi	r18, 0x01	; 1
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	90 40       	sbci	r25, 0x00	; 0
 422:	e1 f7       	brne	.-8      	; 0x41c <Request+0xa>
 424:	00 c0       	rjmp	.+0      	; 0x426 <Request+0x14>
 426:	00 00       	nop
	_delay_ms(1000);
	PORTD &= ~(1<<DHT11_PIN);	/* set to low pin */
 428:	5e 98       	cbi	0x0b, 6	; 11
 42a:	87 e8       	ldi	r24, 0x87	; 135
 42c:	93 e1       	ldi	r25, 0x13	; 19
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <Request+0x1c>
 432:	00 c0       	rjmp	.+0      	; 0x434 <Request+0x22>
 434:	00 00       	nop
	_delay_ms(20);				/* wait for 20ms */
	PORTD |= (1<<DHT11_PIN);	/* set to high pin */
 436:	5e 9a       	sbi	0x0b, 6	; 11
 438:	08 95       	ret

0000043a <Response>:
}

void Response(){			//receive response from DHT11
	DDRD &= ~(1<<DHT11_PIN);
 43a:	56 98       	cbi	0x0a, 6	; 10
	while(PIND & (1<<DHT11_PIN));
 43c:	4e 99       	sbic	0x09, 6	; 9
 43e:	fe cf       	rjmp	.-4      	; 0x43c <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);
 440:	4e 9b       	sbis	0x09, 6	; 9
 442:	fe cf       	rjmp	.-4      	; 0x440 <Response+0x6>
	while(PIND & (1<<DHT11_PIN));
 444:	4e 99       	sbic	0x09, 6	; 9
 446:	fe cf       	rjmp	.-4      	; 0x444 <Response+0xa>
}
 448:	08 95       	ret

0000044a <Receive_data>:

uint8_t Receive_data(){		//receive data 
 44a:	88 e0       	ldi	r24, 0x08	; 8
 44c:	90 e0       	ldi	r25, 0x00	; 0
	for (int q=0; q<8; q++){
		while((PIND & (1<<DHT11_PIN)) == 0);	/* check received bit 0 or 1 */
 44e:	4e 9b       	sbis	0x09, 6	; 9
 450:	fe cf       	rjmp	.-4      	; 0x44e <Receive_data+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 452:	2a e0       	ldi	r18, 0x0A	; 10
 454:	2a 95       	dec	r18
 456:	f1 f7       	brne	.-4      	; 0x454 <Receive_data+0xa>
		_delay_us(30);
		if(PIND & (1<<DHT11_PIN))				/* if high pulse is greater than 30ms */
 458:	4e 9b       	sbis	0x09, 6	; 9
 45a:	07 c0       	rjmp	.+14     	; 0x46a <Receive_data+0x20>
		c = (c<<1)|(0x01);						/* then its logic HIGH */
 45c:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <c>
 460:	22 0f       	add	r18, r18
 462:	21 60       	ori	r18, 0x01	; 1
 464:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <c>
 468:	05 c0       	rjmp	.+10     	; 0x474 <Receive_data+0x2a>
		else									/* otherwise its logic LOW */
		c = (c<<1);
 46a:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <c>
 46e:	22 0f       	add	r18, r18
 470:	20 93 19 02 	sts	0x0219, r18	; 0x800219 <c>
		while(PIND & (1<<DHT11_PIN));
 474:	4e 99       	sbic	0x09, 6	; 9
 476:	fe cf       	rjmp	.-4      	; 0x474 <Receive_data+0x2a>
 478:	01 97       	sbiw	r24, 0x01	; 1
	while((PIND & (1<<DHT11_PIN))==0);
	while(PIND & (1<<DHT11_PIN));
}

uint8_t Receive_data(){		//receive data 
	for (int q=0; q<8; q++){
 47a:	49 f7       	brne	.-46     	; 0x44e <Receive_data+0x4>
		else									/* otherwise its logic LOW */
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
 47c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <c>
 480:	08 95       	ret

00000482 <DTH11_final_code>:
void DTH11_final_code(int Temp_or_hum){
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	00 d0       	rcall	.+0      	; 0x48c <DTH11_final_code+0xa>
 48c:	00 d0       	rcall	.+0      	; 0x48e <DTH11_final_code+0xc>
 48e:	1f 92       	push	r1
 490:	cd b7       	in	r28, 0x3d	; 61
 492:	de b7       	in	r29, 0x3e	; 62
 494:	8c 01       	movw	r16, r24
	char data[5];
	Request();				/* send start pulse */
 496:	0e 94 09 02 	call	0x412	; 0x412 <Request>
	Response();				/* receive response */
 49a:	0e 94 1d 02 	call	0x43a	; 0x43a <Response>
	I_RH=Receive_data();	/* store first eight bit in I_RH */
 49e:	0e 94 25 02 	call	0x44a	; 0x44a <Receive_data>
 4a2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <I_RH>
	D_RH=Receive_data();	/* store next eight bit in D_RH */
 4a6:	0e 94 25 02 	call	0x44a	; 0x44a <Receive_data>
 4aa:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <D_RH>
	I_Temp=Receive_data();	/* store next eight bit in I_Temp */
 4ae:	0e 94 25 02 	call	0x44a	; 0x44a <Receive_data>
 4b2:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <I_Temp>
	D_Temp=Receive_data();	/* store next eight bit in D_Temp */
 4b6:	0e 94 25 02 	call	0x44a	; 0x44a <Receive_data>
 4ba:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <D_Temp>
	CheckSum=Receive_data();/* store next eight bit in CheckSum */
 4be:	0e 94 25 02 	call	0x44a	; 0x44a <Receive_data>
 4c2:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <CheckSum>
	
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
 4c6:	a0 91 1d 02 	lds	r26, 0x021D	; 0x80021d <I_RH>
 4ca:	b0 e0       	ldi	r27, 0x00	; 0
 4cc:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <I_Temp>
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <D_RH>
 4d6:	9d 01       	movw	r18, r26
 4d8:	29 0f       	add	r18, r25
 4da:	31 1d       	adc	r19, r1
 4dc:	2e 0f       	add	r18, r30
 4de:	3f 1f       	adc	r19, r31
 4e0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <D_Temp>
 4e4:	29 0f       	add	r18, r25
 4e6:	31 1d       	adc	r19, r1
 4e8:	48 2f       	mov	r20, r24
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	24 17       	cp	r18, r20
 4ee:	35 07       	cpc	r19, r21
 4f0:	39 f0       	breq	.+14     	; 0x500 <DTH11_final_code+0x7e>
	{
		Transmit_string(error);
 4f2:	84 e2       	ldi	r24, 0x24	; 36
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
		USART_SendLine();
 4fa:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
 4fe:	6a c0       	rjmp	.+212    	; 0x5d4 <DTH11_final_code+0x152>
	}
	
	else
	{
		//1 mean humidity in %
		if(Temp_or_hum == 1){
 500:	01 30       	cpi	r16, 0x01	; 1
 502:	11 05       	cpc	r17, r1
 504:	39 f5       	brne	.+78     	; 0x554 <DTH11_final_code+0xd2>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 506:	4a e0       	ldi	r20, 0x0A	; 10
 508:	be 01       	movw	r22, r28
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	cd 01       	movw	r24, r26
 510:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__itoa_ncheck>
			itoa(I_RH,data,10);	/* Integer to string conversion */
			Transmit_string(Hum_pt);
 514:	88 e1       	ldi	r24, 0x18	; 24
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(data);
 51c:	ce 01       	movw	r24, r28
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(".");
 524:	8c e3       	ldi	r24, 0x3C	; 60
 526:	91 e0       	ldi	r25, 0x01	; 1
 528:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
 52c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <D_RH>
 530:	4a e0       	ldi	r20, 0x0A	; 10
 532:	be 01       	movw	r22, r28
 534:	6f 5f       	subi	r22, 0xFF	; 255
 536:	7f 4f       	sbci	r23, 0xFF	; 255
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__itoa_ncheck>
			itoa(D_RH,data,10);
			Transmit_string(data);
 53e:	ce 01       	movw	r24, r28
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(Hum_siu);
 546:	86 e0       	ldi	r24, 0x06	; 6
 548:	91 e0       	ldi	r25, 0x01	; 1
 54a:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			USART_SendLine();
 54e:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
 552:	40 c0       	rjmp	.+128    	; 0x5d4 <DTH11_final_code+0x152>
		}
		//2 mean temp. in C and F
		else if(Temp_or_hum == 2){
 554:	02 30       	cpi	r16, 0x02	; 2
 556:	11 05       	cpc	r17, r1
 558:	e9 f5       	brne	.+122    	; 0x5d4 <DTH11_final_code+0x152>
 55a:	4a e0       	ldi	r20, 0x0A	; 10
 55c:	be 01       	movw	r22, r28
 55e:	6f 5f       	subi	r22, 0xFF	; 255
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	cf 01       	movw	r24, r30
 564:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__itoa_ncheck>
			itoa(I_Temp,data,10);
			Transmit_string(Temp_pt);
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(data);
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(".");
 578:	8c e3       	ldi	r24, 0x3C	; 60
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
 580:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <D_Temp>
 584:	4a e0       	ldi	r20, 0x0A	; 10
 586:	be 01       	movw	r22, r28
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__itoa_ncheck>
			itoa(D_Temp,data,10);
			Transmit_string(data);
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(Temp_c_siu);
 59a:	83 e0       	ldi	r24, 0x03	; 3
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			USART_SendLine();
 5a2:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
			
			Transmit_string(Temp_pt);
 5a6:	89 e0       	ldi	r24, 0x09	; 9
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
 5ae:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <CheckSum>
 5b2:	4a e0       	ldi	r20, 0x0A	; 10
 5b4:	be 01       	movw	r22, r28
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <__itoa_ncheck>
			itoa(CheckSum,data,10);
			Transmit_string(data);
 5c0:	ce 01       	movw	r24, r28
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			Transmit_string(Temp_f_siu);
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			USART_SendLine();
 5d0:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d4:	2f e9       	ldi	r18, 0x9F	; 159
 5d6:	86 e8       	ldi	r24, 0x86	; 134
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <DTH11_final_code+0x158>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <DTH11_final_code+0x162>
 5e4:	00 00       	nop
		}
	}
	_delay_ms(500);
}
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret

000005fa <mid_state>:
/*----------DHT11/End----------*/

/*----------Buzzer/Begin----------*/
void mid_state(){
	beep_2();	//lazer fire
 5fa:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	beep_7();	//mme 2ou22
 5fe:	0e 94 a7 01 	call	0x34e	; 0x34e <beep_7>
	beep_2();	//lazer fire
 602:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	beep_8();	//IT exit
 606:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <beep_8>
	//beep_8();	//IT exit
	beep_1();	//ou2 e22
 60a:	0e 94 b4 00 	call	0x168	; 0x168 <beep_1>
	beep_2();	//lazer fire
 60e:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	beep_7();	//mme 2ou22
 612:	0e 94 a7 01 	call	0x34e	; 0x34e <beep_7>
	beep_3();	//ou2 e22
 616:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <beep_3>
	/*beep_4();	//ou2 e22*/
	beep_5();	//muzz muzz
 61a:	0e 94 42 01 	call	0x284	; 0x284 <beep_5>
	beep_6();	//mou2 mouw
 61e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <beep_6>
	beep_1();	//ou2 e22
 622:	0e 94 b4 00 	call	0x168	; 0x168 <beep_1>
	beep_2();	//lazer fire
 626:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	beep_7();	//mme 2ou22
 62a:	0e 94 a7 01 	call	0x34e	; 0x34e <beep_7>
	beep_3();	//ou2 e22
 62e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <beep_3>
	/*beep_4();	//ou2 e22*/
	beep_5();	//muzz muzz
 632:	0e 94 42 01 	call	0x284	; 0x284 <beep_5>
	beep_6();	//mou2 mouw
 636:	0e 94 73 01 	call	0x2e6	; 0x2e6 <beep_6>
	beep_2();	//lazer fire
 63a:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	//beep_2();	//lazer fire
	beep_7();	//mme 2ou22
 63e:	0e 94 a7 01 	call	0x34e	; 0x34e <beep_7>
	beep_2();	//lazer fire
 642:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	beep_8();	//IT exit
 646:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <beep_8>
 64a:	08 95       	ret

0000064c <inc_state>:
}
void inc_state(){
	beep_1();	//ou2 e22
 64c:	0e 94 b4 00 	call	0x168	; 0x168 <beep_1>
	beep_2();	//ou2 e22
 650:	0e 94 ca 00 	call	0x194	; 0x194 <beep_2>
	beep_3();	//ou2 e22
 654:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <beep_3>
	beep_4();	//ou2 e22
 658:	0e 94 11 01 	call	0x222	; 0x222 <beep_4>
 65c:	08 95       	ret

0000065e <speaker_info>:
}
void speaker_info(){
	DDRC |= (1 << PINC0);
 65e:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= (1 << PINC0);
 660:	40 9a       	sbi	0x08, 0	; 8
 662:	87 ea       	ldi	r24, 0xA7	; 167
 664:	91 e6       	ldi	r25, 0x61	; 97
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <speaker_info+0x8>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <speaker_info+0xe>
 66c:	00 00       	nop
	_delay_ms(100);
	PORTC &= ~(1 << PINC0);
 66e:	40 98       	cbi	0x08, 0	; 8
	inc_state();
 670:	0e 94 26 03 	call	0x64c	; 0x64c <inc_state>
 674:	08 95       	ret

00000676 <main>:
}
/*----------Buzzer/End----------*/

int main(void){
	DDRB |= 1 << PINB0;         // pin 0 of PORTB as output
 676:	20 9a       	sbi	0x04, 0	; 4
	DDRB |= 1 << PINB1;         // pin 1 of PORTB as output
 678:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1 << PINB2;         // pin 2 of PORTB as output
 67a:	22 9a       	sbi	0x04, 2	; 4
	USART_Begin();
 67c:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Begin>
	int Data_in;
	Transmit_string(start_wel);
 680:	8a e2       	ldi	r24, 0x2A	; 42
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
	USART_SendLine();
 688:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
	speaker_info();
 68c:	0e 94 2f 03 	call	0x65e	; 0x65e <speaker_info>
 690:	87 ea       	ldi	r24, 0xA7	; 167
 692:	91 e6       	ldi	r25, 0x61	; 97
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	f1 f7       	brne	.-4      	; 0x694 <main+0x1e>
 698:	00 c0       	rjmp	.+0      	; 0x69a <main+0x24>
 69a:	00 00       	nop
		}
		else if(Data_in == '3'){
			if(pressed_f3 == false){		//if false not On
				Transmit_string("Red LED -> ON");
				PORTB |= 1 << PINB2;	// switch PB2 to 1
				pressed_f3 = true;
 69c:	c1 e0       	ldi	r28, 0x01	; 1
	Transmit_string(start_wel);
	USART_SendLine();
	speaker_info();
	_delay_ms(100);
	while(1){
		Data_in= USART_Receive();
 69e:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_Receive>
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	e7 ea       	ldi	r30, 0xA7	; 167
 6a6:	f1 e6       	ldi	r31, 0x61	; 97
 6a8:	31 97       	sbiw	r30, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <main+0x32>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x38>
 6ae:	00 00       	nop
		_delay_ms(100);
		//USART_SendByte(Data_in);
		if(Data_in == '1'){
 6b0:	81 33       	cpi	r24, 0x31	; 49
 6b2:	91 05       	cpc	r25, r1
 6b4:	b1 f4       	brne	.+44     	; 0x6e2 <main+0x6c>
			if(pressed_f1 == false){		//if false not On
 6b6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <pressed_f1>
 6ba:	81 11       	cpse	r24, r1
 6bc:	08 c0       	rjmp	.+16     	; 0x6ce <main+0x58>
				Transmit_string("Green LED -> ON");
 6be:	8e e3       	ldi	r24, 0x3E	; 62
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
				PORTB |= 1 << PINB0;		// switch PB0 to 1
 6c6:	28 9a       	sbi	0x05, 0	; 5
				pressed_f1 = true;
 6c8:	c0 93 18 02 	sts	0x0218, r28	; 0x800218 <pressed_f1>
 6cc:	07 c0       	rjmp	.+14     	; 0x6dc <main+0x66>
			}
			else {
				Transmit_string("Green LED -> OFF");
 6ce:	8e e4       	ldi	r24, 0x4E	; 78
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
				PORTB &= ~(1 << PINB0);		// switch PB0 to 0FF
 6d6:	28 98       	cbi	0x05, 0	; 5
				pressed_f1 = false;
 6d8:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <pressed_f1>
			}
			USART_SendLine();
 6dc:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
 6e0:	74 c0       	rjmp	.+232    	; 0x7ca <main+0x154>
		}
		else if(Data_in == '2'){
 6e2:	82 33       	cpi	r24, 0x32	; 50
 6e4:	91 05       	cpc	r25, r1
 6e6:	b1 f4       	brne	.+44     	; 0x714 <main+0x9e>
			if(pressed_f2 == false){			//if false not On
 6e8:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <pressed_f2>
 6ec:	81 11       	cpse	r24, r1
 6ee:	08 c0       	rjmp	.+16     	; 0x700 <main+0x8a>
				Transmit_string("Blue LED -> ON");
 6f0:	8f e5       	ldi	r24, 0x5F	; 95
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
				PORTB |= 1 << PINB1;		// switch PB1 to 1
 6f8:	29 9a       	sbi	0x05, 1	; 5
				pressed_f2 = true;
 6fa:	c0 93 17 02 	sts	0x0217, r28	; 0x800217 <pressed_f2>
 6fe:	07 c0       	rjmp	.+14     	; 0x70e <main+0x98>
			}
			else {
				Transmit_string("Blue LED -> OFF");
 700:	8e e6       	ldi	r24, 0x6E	; 110
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
				PORTB &= ~(1 << PINB1);		// switch PB1 to 0FF
 708:	29 98       	cbi	0x05, 1	; 5
				pressed_f2 = false;
 70a:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <pressed_f2>
			}
			USART_SendLine();
 70e:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
 712:	5b c0       	rjmp	.+182    	; 0x7ca <main+0x154>
		}
		else if(Data_in == '3'){
 714:	83 33       	cpi	r24, 0x33	; 51
 716:	91 05       	cpc	r25, r1
 718:	b1 f4       	brne	.+44     	; 0x746 <main+0xd0>
			if(pressed_f3 == false){		//if false not On
 71a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <__data_end>
 71e:	81 11       	cpse	r24, r1
 720:	08 c0       	rjmp	.+16     	; 0x732 <main+0xbc>
				Transmit_string("Red LED -> ON");
 722:	8e e7       	ldi	r24, 0x7E	; 126
 724:	91 e0       	ldi	r25, 0x01	; 1
 726:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
				PORTB |= 1 << PINB2;	// switch PB2 to 1
 72a:	2a 9a       	sbi	0x05, 2	; 5
				pressed_f3 = true;
 72c:	c0 93 16 02 	sts	0x0216, r28	; 0x800216 <__data_end>
 730:	07 c0       	rjmp	.+14     	; 0x740 <main+0xca>
			}
			else {
				Transmit_string("Red LED -> OFF");
 732:	8c e8       	ldi	r24, 0x8C	; 140
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
				PORTB &= ~(1 << PINB2);		// switch PB2 to 0FF
 73a:	2a 98       	cbi	0x05, 2	; 5
				pressed_f3 = false;
 73c:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <__data_end>
			}
			USART_SendLine();
 740:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
 744:	42 c0       	rjmp	.+132    	; 0x7ca <main+0x154>
		}
		else if(Data_in == '4'){
 746:	84 33       	cpi	r24, 0x34	; 52
 748:	91 05       	cpc	r25, r1
 74a:	a1 f4       	brne	.+40     	; 0x774 <main+0xfe>
			Transmit_string("|---- [Humidity] ----|");
 74c:	8b e9       	ldi	r24, 0x9B	; 155
 74e:	91 e0       	ldi	r25, 0x01	; 1
 750:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			USART_SendLine();
 754:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
			DTH11_final_code(1);
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 41 02 	call	0x482	; 0x482 <DTH11_final_code>
 760:	ff e9       	ldi	r31, 0x9F	; 159
 762:	26 e8       	ldi	r18, 0x86	; 134
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	f1 50       	subi	r31, 0x01	; 1
 768:	20 40       	sbci	r18, 0x00	; 0
 76a:	80 40       	sbci	r24, 0x00	; 0
 76c:	e1 f7       	brne	.-8      	; 0x766 <main+0xf0>
 76e:	00 c0       	rjmp	.+0      	; 0x770 <main+0xfa>
 770:	00 00       	nop
 772:	2b c0       	rjmp	.+86     	; 0x7ca <main+0x154>
			_delay_ms(500);
		}
		else if(Data_in == '5'){
 774:	85 33       	cpi	r24, 0x35	; 53
 776:	91 05       	cpc	r25, r1
 778:	a1 f4       	brne	.+40     	; 0x7a2 <main+0x12c>
			Transmit_string("|---- [Temperature] ----|");
 77a:	82 eb       	ldi	r24, 0xB2	; 178
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			USART_SendLine();
 782:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
			DTH11_final_code(2);
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 94 41 02 	call	0x482	; 0x482 <DTH11_final_code>
 78e:	9f e9       	ldi	r25, 0x9F	; 159
 790:	e6 e8       	ldi	r30, 0x86	; 134
 792:	f1 e0       	ldi	r31, 0x01	; 1
 794:	91 50       	subi	r25, 0x01	; 1
 796:	e0 40       	sbci	r30, 0x00	; 0
 798:	f0 40       	sbci	r31, 0x00	; 0
 79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x11e>
 79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x128>
 79e:	00 00       	nop
 7a0:	14 c0       	rjmp	.+40     	; 0x7ca <main+0x154>
			_delay_ms(500);
		}
		else if(Data_in == '6'){
 7a2:	c6 97       	sbiw	r24, 0x36	; 54
 7a4:	91 f4       	brne	.+36     	; 0x7ca <main+0x154>
			Transmit_string("|---- [Buzzer] ----|");
 7a6:	8c ec       	ldi	r24, 0xCC	; 204
 7a8:	91 e0       	ldi	r25, 0x01	; 1
 7aa:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			USART_SendLine();
 7ae:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
			Transmit_string("Enjoy!!!");
 7b2:	81 ee       	ldi	r24, 0xE1	; 225
 7b4:	91 e0       	ldi	r25, 0x01	; 1
 7b6:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
			mid_state();
 7ba:	0e 94 fd 02 	call	0x5fa	; 0x5fa <mid_state>
			USART_SendLine();
 7be:	0e 94 8a 00 	call	0x114	; 0x114 <USART_SendLine>
			Transmit_string("Unfortunately, it's over now! play again!!");
 7c2:	8a ee       	ldi	r24, 0xEA	; 234
 7c4:	91 e0       	ldi	r25, 0x01	; 1
 7c6:	0e 94 74 00 	call	0xe8	; 0xe8 <Transmit_string>
 7ca:	87 ea       	ldi	r24, 0xA7	; 167
 7cc:	91 e6       	ldi	r25, 0x61	; 97
 7ce:	01 97       	sbiw	r24, 0x01	; 1
 7d0:	f1 f7       	brne	.-4      	; 0x7ce <main+0x158>
 7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0x15e>
 7d4:	00 00       	nop
 7d6:	63 cf       	rjmp	.-314    	; 0x69e <main+0x28>

000007d8 <__itoa_ncheck>:
 7d8:	bb 27       	eor	r27, r27
 7da:	4a 30       	cpi	r20, 0x0A	; 10
 7dc:	31 f4       	brne	.+12     	; 0x7ea <__itoa_ncheck+0x12>
 7de:	99 23       	and	r25, r25
 7e0:	22 f4       	brpl	.+8      	; 0x7ea <__itoa_ncheck+0x12>
 7e2:	bd e2       	ldi	r27, 0x2D	; 45
 7e4:	90 95       	com	r25
 7e6:	81 95       	neg	r24
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__utoa_common>

000007ee <__utoa_ncheck>:
 7ee:	bb 27       	eor	r27, r27

000007f0 <__utoa_common>:
 7f0:	fb 01       	movw	r30, r22
 7f2:	55 27       	eor	r21, r21
 7f4:	aa 27       	eor	r26, r26
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	aa 1f       	adc	r26, r26
 7fc:	a4 17       	cp	r26, r20
 7fe:	10 f0       	brcs	.+4      	; 0x804 <__utoa_common+0x14>
 800:	a4 1b       	sub	r26, r20
 802:	83 95       	inc	r24
 804:	50 51       	subi	r21, 0x10	; 16
 806:	b9 f7       	brne	.-18     	; 0x7f6 <__utoa_common+0x6>
 808:	a0 5d       	subi	r26, 0xD0	; 208
 80a:	aa 33       	cpi	r26, 0x3A	; 58
 80c:	08 f0       	brcs	.+2      	; 0x810 <__utoa_common+0x20>
 80e:	a9 5d       	subi	r26, 0xD9	; 217
 810:	a1 93       	st	Z+, r26
 812:	00 97       	sbiw	r24, 0x00	; 0
 814:	79 f7       	brne	.-34     	; 0x7f4 <__utoa_common+0x4>
 816:	b1 11       	cpse	r27, r1
 818:	b1 93       	st	Z+, r27
 81a:	11 92       	st	Z+, r1
 81c:	cb 01       	movw	r24, r22
 81e:	0c 94 11 04 	jmp	0x822	; 0x822 <strrev>

00000822 <strrev>:
 822:	dc 01       	movw	r26, r24
 824:	fc 01       	movw	r30, r24
 826:	67 2f       	mov	r22, r23
 828:	71 91       	ld	r23, Z+
 82a:	77 23       	and	r23, r23
 82c:	e1 f7       	brne	.-8      	; 0x826 <strrev+0x4>
 82e:	32 97       	sbiw	r30, 0x02	; 2
 830:	04 c0       	rjmp	.+8      	; 0x83a <strrev+0x18>
 832:	7c 91       	ld	r23, X
 834:	6d 93       	st	X+, r22
 836:	70 83       	st	Z, r23
 838:	62 91       	ld	r22, -Z
 83a:	ae 17       	cp	r26, r30
 83c:	bf 07       	cpc	r27, r31
 83e:	c8 f3       	brcs	.-14     	; 0x832 <strrev+0x10>
 840:	08 95       	ret

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
